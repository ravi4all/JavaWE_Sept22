Binary Tree

- binary tree cannot have more than 2 children
- it can have 0,1 or 2 child

- Used in machine learning known as decision tree
- Expression evaluation
    3 + ((5+9) * 2)

- tree is a collection of nodes
- node contains 3 things
    - left child
    - data
    - right child

- Tree CRUD

Tree Traversal
- Breadth First / Level Order - traverse tree level by level
- Depth First   - complete first side then other other side
    - InOrder   - LPR - Left Parent Right
    - PreOrder  - PLR - Parent Left Right
    - PostOrder - LRP - Left Right Parent

Recursion
Iterative
Height of tree
Count Nodes of a tree
Maximum element in a binary tree - HW
Left View
Right View - HW
Vertical Order Traversal
Top View - HW
Bottom View - HW
Diagonal View - HW
Boundary Traversal - HW
Children Sum Property
Construct Sum Tree
Check for Balance Tree - HW
    - height diff b/w left sub tree and right sub tree not more than 1, than it is a Balance tree
Spiral Tree
Ancestor of a node - HW
Diameter of tree / Longest width
- Longest Path b/w 2 leaf nodes
- Build using only one function - HW

LCA - Lowest Common Ancestor
- Using 2 array
- Without using any array

Mirror a binary tree
Identical Trees
- given 2 Trees
- check if both trees are Identical

Construct binary tree using Inorder and PreOrder
- i/p : in[] = {20,10,30}, pre[] = {10,20,30}
- i/p : in[] = {40,20,50,10,30,80,70,90}

=========================================
BST - Binary Search Tree
- inspired from binary search
- your root is like a mid element and on left side we have low elements and 
on right side we have high elements

Insert Node
Search Node
Remove Node
